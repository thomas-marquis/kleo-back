// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/kleo-back/internal/transactions (interfaces: Transactionrepository)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/transactions.go github.com/thomas-marquis/kleo-back/internal/transactions Transactionrepository
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	transactions "github.com/thomas-marquis/kleo-back/internal/transactions"
	user "github.com/thomas-marquis/kleo-back/internal/user"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionrepository is a mock of Transactionrepository interface.
type MockTransactionrepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionrepositoryMockRecorder
}

// MockTransactionrepositoryMockRecorder is the mock recorder for MockTransactionrepository.
type MockTransactionrepositoryMockRecorder struct {
	mock *MockTransactionrepository
}

// NewMockTransactionrepository creates a new mock instance.
func NewMockTransactionrepository(ctrl *gomock.Controller) *MockTransactionrepository {
	mock := &MockTransactionrepository{ctrl: ctrl}
	mock.recorder = &MockTransactionrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionrepository) EXPECT() *MockTransactionrepositoryMockRecorder {
	return m.recorder
}

// SaveAllocation mocks base method.
func (m *MockTransactionrepository) SaveAllocation(arg0 transactions.Transaction, arg1 user.User, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAllocation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAllocation indicates an expected call of SaveAllocation.
func (mr *MockTransactionrepositoryMockRecorder) SaveAllocation(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAllocation", reflect.TypeOf((*MockTransactionrepository)(nil).SaveAllocation), arg0, arg1, arg2)
}
