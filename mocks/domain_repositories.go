// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/kleo-back/internal/domain (interfaces: TransactionRepository)
//
// Generated by this command:
//
//	mockgen -package mocks_domain -destination mocks/domain_repositories.go github.com/thomas-marquis/kleo-back/internal/domain TransactionRepository
//
// Package mocks_domain is a generated GoMock package.
package mocks_domain

import (
	context "context"
	reflect "reflect"

	domain "github.com/thomas-marquis/kleo-back/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// FindByUserId mocks base method.
func (m *MockTransactionRepository) FindByUserId(arg0 context.Context, arg1 domain.UserId, arg2, arg3 int) ([]*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockTransactionRepositoryMockRecorder) FindByUserId(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockTransactionRepository)(nil).FindByUserId), arg0, arg1, arg2, arg3)
}

// Save mocks base method.
func (m *MockTransactionRepository) Save(arg0 context.Context, arg1 *domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTransactionRepositoryMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransactionRepository)(nil).Save), arg0, arg1)
}

// SaveRaw mocks base method.
func (m *MockTransactionRepository) SaveRaw(arg0 context.Context, arg1 *domain.RawTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRaw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRaw indicates an expected call of SaveRaw.
func (mr *MockTransactionRepositoryMockRecorder) SaveRaw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRaw", reflect.TypeOf((*MockTransactionRepository)(nil).SaveRaw), arg0, arg1)
}
